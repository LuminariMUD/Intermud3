[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "i3-gateway"
version = "0.1.0"
description = "Intermud3 Protocol Gateway - A standalone Python service for MUD-to-I3 network bridging"
readme = "README.md"
requires-python = ">=3.9"
license = {text = "MIT"}
authors = [
    {name = "I3 Gateway Team", email = "admin@example.com"}
]
keywords = ["intermud3", "mud", "gateway", "protocol", "networking"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Games/Entertainment :: Multi-User Dungeons (MUD)",
    "Topic :: Internet",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

dependencies = [
    "pyyaml>=6.0",
    "structlog>=23.0",
    "aiohttp>=3.9.0",
    "pydantic>=2.0",
    "python-dotenv>=1.0.0",
    "click>=8.0",
    "psutil>=5.9.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0",
    "pytest-asyncio>=0.21",
    "pytest-cov>=4.0",
    "pytest-mock>=3.11",
    "black>=23.0",
    "ruff>=0.1.0",
    "mypy>=1.5",
    "pre-commit>=3.3",
    "types-pyyaml>=6.0",
]
docs = [
    "sphinx>=7.0",
    "sphinx-rtd-theme>=1.3",
]
security = [
    "bandit>=1.7",
    "safety>=2.3",
    "pip-audit>=2.6",
]

[project.scripts]
i3-gateway = "src.__main__:main"

[project.urls]
Homepage = "https://github.com/yourusername/Intermud3"
Documentation = "https://intermud3.readthedocs.io"
Repository = "https://github.com/yourusername/Intermud3"
Issues = "https://github.com/yourusername/Intermud3/issues"

# Tool configurations

[tool.setuptools.packages.find]
where = ["."]
include = ["src", "src.*"]

[tool.black]
line-length = 100
target-version = ['py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.ruff]
line-length = 100
target-version = "py39"
extend-include = ["*.pyi?"]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "PTH", # flake8-use-pathlib
    "ERA", # flake8-eradicate
    "RUF", # Ruff-specific rules
]
ignore = [
    "E501",  # Line too long (handled by black)
    "B008",  # Function calls in argument defaults
    "B904",  # raise without from inside except
    "SIM108", # Use ternary operator instead of if-else
]
fixable = ["ALL"]
unfixable = []

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101", "ARG001", "ARG002"]  # Allow assert and unused arguments in tests
"**/__init__.py" = ["F401"]  # Allow unused imports in __init__ files

[tool.ruff.lint.isort]
known-first-party = ["src"]

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_any_generics = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
follow_imports = "normal"
ignore_missing_imports = true
pretty = true
show_column_numbers = true
show_error_codes = true
show_error_context = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--verbose",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=80",
    "--strict-markers",
    "--tb=short",
]
asyncio_mode = "auto"
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "slow: Slow tests",
    "network: Tests requiring network access",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/__init__.py",
    "*/conftest.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "def __str__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@abstractmethod",
]
